/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Square from "../../../index";
import { CustomAttributeDefinitions } from "../resources/customAttributeDefinitions/client/Client";
import { CustomAttributes } from "../resources/customAttributes/client/Client";
import { LocationProfiles } from "../resources/locationProfiles/client/Client";
import { TeamMemberProfiles } from "../resources/teamMemberProfiles/client/Client";
export declare namespace Bookings {
    interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-09-24";
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-09-24";
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}
export declare class Bookings {
    protected readonly _options: Bookings.Options;
    protected _customAttributeDefinitions: CustomAttributeDefinitions | undefined;
    protected _customAttributes: CustomAttributes | undefined;
    protected _locationProfiles: LocationProfiles | undefined;
    protected _teamMemberProfiles: TeamMemberProfiles | undefined;
    constructor(_options?: Bookings.Options);
    get customAttributeDefinitions(): CustomAttributeDefinitions;
    get customAttributes(): CustomAttributes;
    get locationProfiles(): LocationProfiles;
    get teamMemberProfiles(): TeamMemberProfiles;
    /**
     * Retrieve a collection of bookings.
     *
     * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_READ` for the OAuth scope.
     * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_READ` and `APPOINTMENTS_READ` for the OAuth scope.
     *
     * @param {Square.ListBookingsRequest} request
     * @param {Bookings.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.bookings.list()
     */
    list(request?: Square.ListBookingsRequest, requestOptions?: Bookings.RequestOptions): Promise<core.Page<Square.Booking>>;
    /**
     * Creates a booking.
     *
     * The required input must include the following:
     * - `Booking.location_id`
     * - `Booking.start_at`
     * - `Booking.AppointmentSegment.team_member_id`
     * - `Booking.AppointmentSegment.service_variation_id`
     * - `Booking.AppointmentSegment.service_variation_version`
     *
     * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_WRITE` for the OAuth scope.
     * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_WRITE` and `APPOINTMENTS_WRITE` for the OAuth scope.
     *
     * For calls to this endpoint with seller-level permissions to succeed, the seller must have subscribed to *Appointments Plus*
     * or *Appointments Premium*.
     *
     * @param {Square.CreateBookingRequest} request
     * @param {Bookings.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.bookings.create({
     *         booking: {}
     *     })
     */
    create(request: Square.CreateBookingRequest, requestOptions?: Bookings.RequestOptions): core.HttpResponsePromise<Square.CreateBookingResponse>;
    private __create;
    /**
     * Searches for availabilities for booking.
     *
     * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_READ` for the OAuth scope.
     * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_READ` and `APPOINTMENTS_READ` for the OAuth scope.
     *
     * @param {Square.SearchAvailabilityRequest} request
     * @param {Bookings.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.bookings.searchAvailability({
     *         query: {
     *             filter: {
     *                 startAtRange: {}
     *             }
     *         }
     *     })
     */
    searchAvailability(request: Square.SearchAvailabilityRequest, requestOptions?: Bookings.RequestOptions): core.HttpResponsePromise<Square.SearchAvailabilityResponse>;
    private __searchAvailability;
    /**
     * Bulk-Retrieves a list of bookings by booking IDs.
     *
     * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_READ` for the OAuth scope.
     * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_READ` and `APPOINTMENTS_READ` for the OAuth scope.
     *
     * @param {Square.BulkRetrieveBookingsRequest} request
     * @param {Bookings.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.bookings.bulkRetrieveBookings({
     *         bookingIds: ["booking_ids"]
     *     })
     */
    bulkRetrieveBookings(request: Square.BulkRetrieveBookingsRequest, requestOptions?: Bookings.RequestOptions): core.HttpResponsePromise<Square.BulkRetrieveBookingsResponse>;
    private __bulkRetrieveBookings;
    /**
     * Retrieves a seller's booking profile.
     *
     * @param {Bookings.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.bookings.getBusinessProfile()
     */
    getBusinessProfile(requestOptions?: Bookings.RequestOptions): core.HttpResponsePromise<Square.GetBusinessBookingProfileResponse>;
    private __getBusinessProfile;
    /**
     * Retrieves a seller's location booking profile.
     *
     * @param {Square.RetrieveLocationBookingProfileRequest} request
     * @param {Bookings.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.bookings.retrieveLocationBookingProfile({
     *         locationId: "location_id"
     *     })
     */
    retrieveLocationBookingProfile(request: Square.RetrieveLocationBookingProfileRequest, requestOptions?: Bookings.RequestOptions): core.HttpResponsePromise<Square.RetrieveLocationBookingProfileResponse>;
    private __retrieveLocationBookingProfile;
    /**
     * Retrieves one or more team members' booking profiles.
     *
     * @param {Square.BulkRetrieveTeamMemberBookingProfilesRequest} request
     * @param {Bookings.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.bookings.bulkRetrieveTeamMemberBookingProfiles({
     *         teamMemberIds: ["team_member_ids"]
     *     })
     */
    bulkRetrieveTeamMemberBookingProfiles(request: Square.BulkRetrieveTeamMemberBookingProfilesRequest, requestOptions?: Bookings.RequestOptions): core.HttpResponsePromise<Square.BulkRetrieveTeamMemberBookingProfilesResponse>;
    private __bulkRetrieveTeamMemberBookingProfiles;
    /**
     * Retrieves a booking.
     *
     * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_READ` for the OAuth scope.
     * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_READ` and `APPOINTMENTS_READ` for the OAuth scope.
     *
     * @param {Square.GetBookingsRequest} request
     * @param {Bookings.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.bookings.get({
     *         bookingId: "booking_id"
     *     })
     */
    get(request: Square.GetBookingsRequest, requestOptions?: Bookings.RequestOptions): core.HttpResponsePromise<Square.GetBookingResponse>;
    private __get;
    /**
     * Updates a booking.
     *
     * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_WRITE` for the OAuth scope.
     * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_WRITE` and `APPOINTMENTS_WRITE` for the OAuth scope.
     *
     * For calls to this endpoint with seller-level permissions to succeed, the seller must have subscribed to *Appointments Plus*
     * or *Appointments Premium*.
     *
     * @param {Square.UpdateBookingRequest} request
     * @param {Bookings.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.bookings.update({
     *         bookingId: "booking_id",
     *         booking: {}
     *     })
     */
    update(request: Square.UpdateBookingRequest, requestOptions?: Bookings.RequestOptions): core.HttpResponsePromise<Square.UpdateBookingResponse>;
    private __update;
    /**
     * Cancels an existing booking.
     *
     * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_WRITE` for the OAuth scope.
     * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_WRITE` and `APPOINTMENTS_WRITE` for the OAuth scope.
     *
     * For calls to this endpoint with seller-level permissions to succeed, the seller must have subscribed to *Appointments Plus*
     * or *Appointments Premium*.
     *
     * @param {Square.CancelBookingRequest} request
     * @param {Bookings.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.bookings.cancel({
     *         bookingId: "booking_id"
     *     })
     */
    cancel(request: Square.CancelBookingRequest, requestOptions?: Bookings.RequestOptions): core.HttpResponsePromise<Square.CancelBookingResponse>;
    private __cancel;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
