"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Refunds = void 0;
const environments = __importStar(require("../../../../environments"));
const core = __importStar(require("../../../../core"));
const serializers = __importStar(require("../../../../serialization/index"));
const headers_1 = require("../../../../core/headers");
const errors = __importStar(require("../../../../errors/index"));
class Refunds {
    constructor(_options = {}) {
        this._options = _options;
    }
    /**
     * Retrieves a list of refunds for the account making the request.
     *
     * Results are eventually consistent, and new refunds or changes to refunds might take several
     * seconds to appear.
     *
     * The maximum results per page is 100.
     *
     * @param {Square.ListRefundsRequest} request
     * @param {Refunds.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.refunds.list()
     */
    list() {
        return __awaiter(this, arguments, void 0, function* (request = {}, requestOptions) {
            const list = core.HttpResponsePromise.interceptFunction((request) => __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c, _d, _e, _f;
                const { beginTime, endTime, sortOrder, cursor, locationId, status, sourceType, limit, updatedAtBeginTime, updatedAtEndTime, sortField, } = request;
                const _queryParams = {};
                if (beginTime !== undefined) {
                    _queryParams["begin_time"] = beginTime;
                }
                if (endTime !== undefined) {
                    _queryParams["end_time"] = endTime;
                }
                if (sortOrder !== undefined) {
                    _queryParams["sort_order"] = sortOrder;
                }
                if (cursor !== undefined) {
                    _queryParams["cursor"] = cursor;
                }
                if (locationId !== undefined) {
                    _queryParams["location_id"] = locationId;
                }
                if (status !== undefined) {
                    _queryParams["status"] = status;
                }
                if (sourceType !== undefined) {
                    _queryParams["source_type"] = sourceType;
                }
                if (limit !== undefined) {
                    _queryParams["limit"] = (_a = limit === null || limit === void 0 ? void 0 : limit.toString()) !== null && _a !== void 0 ? _a : null;
                }
                if (updatedAtBeginTime !== undefined) {
                    _queryParams["updated_at_begin_time"] = updatedAtBeginTime;
                }
                if (updatedAtEndTime !== undefined) {
                    _queryParams["updated_at_end_time"] = updatedAtEndTime;
                }
                if (sortField !== undefined) {
                    _queryParams["sort_field"] = serializers.ListPaymentRefundsRequestSortField.jsonOrThrow(sortField, {
                        unrecognizedObjectKeys: "strip",
                        omitUndefined: true,
                    });
                }
                const _response = yield ((_b = this._options.fetcher) !== null && _b !== void 0 ? _b : core.fetcher)({
                    url: core.url.join((_d = (_c = (yield core.Supplier.get(this._options.baseUrl))) !== null && _c !== void 0 ? _c : (yield core.Supplier.get(this._options.environment))) !== null && _d !== void 0 ? _d : environments.SquareEnvironment.Production, "v2/refunds"),
                    method: "GET",
                    headers: (0, headers_1.mergeHeaders)((_e = this._options) === null || _e === void 0 ? void 0 : _e.headers, (0, headers_1.mergeOnlyDefinedHeaders)({
                        Authorization: yield this._getAuthorizationHeader(),
                        "Square-Version": (_f = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.version) !== null && _f !== void 0 ? _f : "2025-09-24",
                    }), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                    queryParameters: _queryParams,
                    timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                    abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: serializers.ListPaymentRefundsResponse.parseOrThrow(_response.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SquareError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SquareError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SquareTimeoutError("Timeout exceeded when calling GET /v2/refunds.");
                    case "unknown":
                        throw new errors.SquareError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            }));
            const dataWithRawResponse = yield list(request).withRawResponse();
            return new core.Pageable({
                response: dataWithRawResponse.data,
                rawResponse: dataWithRawResponse.rawResponse,
                hasNextPage: (response) => (response === null || response === void 0 ? void 0 : response.cursor) != null && !(typeof (response === null || response === void 0 ? void 0 : response.cursor) === "string" && (response === null || response === void 0 ? void 0 : response.cursor) === ""),
                getItems: (response) => { var _a; return (_a = response === null || response === void 0 ? void 0 : response.refunds) !== null && _a !== void 0 ? _a : []; },
                loadPage: (response) => {
                    return list(core.setObjectProperty(request, "cursor", response === null || response === void 0 ? void 0 : response.cursor));
                },
            });
        });
    }
    /**
     * Refunds a payment. You can refund the entire payment amount or a
     * portion of it. You can use this endpoint to refund a card payment or record a
     * refund of a cash or external payment. For more information, see
     * [Refund Payment](https://developer.squareup.com/docs/payments-api/refund-payments).
     *
     * @param {Square.RefundPaymentRequest} request
     * @param {Refunds.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.refunds.refundPayment({
     *         idempotencyKey: "9b7f2dcf-49da-4411-b23e-a2d6af21333a",
     *         amountMoney: {
     *             amount: BigInt("1000"),
     *             currency: "USD"
     *         },
     *         appFeeMoney: {
     *             amount: BigInt("10"),
     *             currency: "USD"
     *         },
     *         paymentId: "R2B3Z8WMVt3EAmzYWLZvz7Y69EbZY",
     *         reason: "Example"
     *     })
     */
    refundPayment(request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__refundPayment(request, requestOptions));
    }
    __refundPayment(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d, _e;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: core.url.join((_c = (_b = (yield core.Supplier.get(this._options.baseUrl))) !== null && _b !== void 0 ? _b : (yield core.Supplier.get(this._options.environment))) !== null && _c !== void 0 ? _c : environments.SquareEnvironment.Production, "v2/refunds"),
                method: "POST",
                headers: (0, headers_1.mergeHeaders)((_d = this._options) === null || _d === void 0 ? void 0 : _d.headers, (0, headers_1.mergeOnlyDefinedHeaders)({
                    Authorization: yield this._getAuthorizationHeader(),
                    "Square-Version": (_e = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.version) !== null && _e !== void 0 ? _e : "2025-09-24",
                }), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                body: serializers.RefundPaymentRequest.jsonOrThrow(request, {
                    unrecognizedObjectKeys: "strip",
                    omitUndefined: true,
                }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return {
                    data: serializers.RefundPaymentResponse.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        skipValidation: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    rawResponse: _response.rawResponse,
                };
            }
            if (_response.error.reason === "status-code") {
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                    rawResponse: _response.rawResponse,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.SquareError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.SquareTimeoutError("Timeout exceeded when calling POST /v2/refunds.");
                case "unknown":
                    throw new errors.SquareError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Retrieves a specific refund using the `refund_id`.
     *
     * @param {Square.GetRefundsRequest} request
     * @param {Refunds.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.refunds.get({
     *         refundId: "refund_id"
     *     })
     */
    get(request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__get(request, requestOptions));
    }
    __get(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d, _e;
            const { refundId } = request;
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: core.url.join((_c = (_b = (yield core.Supplier.get(this._options.baseUrl))) !== null && _b !== void 0 ? _b : (yield core.Supplier.get(this._options.environment))) !== null && _c !== void 0 ? _c : environments.SquareEnvironment.Production, `v2/refunds/${encodeURIComponent(refundId)}`),
                method: "GET",
                headers: (0, headers_1.mergeHeaders)((_d = this._options) === null || _d === void 0 ? void 0 : _d.headers, (0, headers_1.mergeOnlyDefinedHeaders)({
                    Authorization: yield this._getAuthorizationHeader(),
                    "Square-Version": (_e = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.version) !== null && _e !== void 0 ? _e : "2025-09-24",
                }), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return {
                    data: serializers.GetPaymentRefundResponse.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        skipValidation: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    rawResponse: _response.rawResponse,
                };
            }
            if (_response.error.reason === "status-code") {
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                    rawResponse: _response.rawResponse,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.SquareError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.SquareTimeoutError("Timeout exceeded when calling GET /v2/refunds/{refund_id}.");
                case "unknown":
                    throw new errors.SquareError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    _getAuthorizationHeader() {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const bearer = (_a = (yield core.Supplier.get(this._options.token))) !== null && _a !== void 0 ? _a : process === null || process === void 0 ? void 0 : process.env["SQUARE_TOKEN"];
            if (bearer != null) {
                return `Bearer ${bearer}`;
            }
            return undefined;
        });
    }
}
exports.Refunds = Refunds;
